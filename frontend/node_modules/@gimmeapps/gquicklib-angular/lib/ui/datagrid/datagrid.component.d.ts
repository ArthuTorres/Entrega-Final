import { EventEmitter } from '@angular/core';
import { BaseModel, Lookup } from '../../shared';
import * as i0 from "@angular/core";
export interface DataGridPagination {
    currentPage: number;
    pageSizes: Lookup;
    pageSize: number;
    pageCount?: number;
    pages?: number[];
}
export interface DatagridColumn {
    label: string;
    path: string;
    formatFn?: (value: any) => string;
}
export interface DatagridOptions {
    columns: DatagridColumn[];
    showAuditTimestamps?: boolean;
    canEdit?: boolean;
    canDelete?: boolean;
}
export declare class DatagridComponent {
    data: Partial<BaseModel>[];
    pagination?: DataGridPagination;
    options?: DatagridOptions;
    onLoadRequested: EventEmitter<void | DataGridPagination>;
    onEditRequested: EventEmitter<number>;
    onDeleteRequested: EventEmitter<number>;
    getProperty(obj: any, column: DatagridColumn): string;
    edit(item: Partial<BaseModel>): void;
    askForDelete(item: Partial<BaseModel>): void;
    nextPage(): void;
    changePage(pageNumber: number): void;
    previousPage(): void;
    changePageSize($event: string | number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DatagridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DatagridComponent, "quick-datagrid", never, { "data": { "alias": "data"; "required": false; }; "pagination": { "alias": "pagination"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, { "onLoadRequested": "onLoadRequested"; "onEditRequested": "onEditRequested"; "onDeleteRequested": "onDeleteRequested"; }, never, never, false, never>;
}
