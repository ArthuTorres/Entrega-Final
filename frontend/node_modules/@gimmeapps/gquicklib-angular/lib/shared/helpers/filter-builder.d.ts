export type FilterConditionOperator = "=" | "<" | "<=" | ">" | ">=" | 'isnull';
export type FilterGroupOperator = "and" | "or";
export type FilterConditionEquals = {
    "=": {
        [key: string]: any;
    };
};
export type FilterConditionLessThan = {
    "<": {
        [key: string]: any;
    };
};
export type FilterConditionLessThanOrEqual = {
    "<=": {
        [key: string]: any;
    };
};
export type FilterConditionGreaterThan = {
    ">": {
        [key: string]: any;
    };
};
export type FilterConditionGreaterThanOrEqual = {
    ">=": {
        [key: string]: any;
    };
};
export type FilterConditionIsNull = {
    'isnull': {
        [key: string]: any;
    };
};
export type FilterCondition = FilterConditionEquals | FilterConditionLessThan | FilterConditionLessThanOrEqual | FilterConditionGreaterThan | FilterConditionGreaterThanOrEqual | FilterConditionIsNull;
export type FilterGroupAnd = {
    "and": FilterLogicalGroup[];
};
export type FilterGroupOr = {
    "or": FilterLogicalGroup[];
};
export type FilterGroup = FilterGroupAnd | FilterGroupOr;
export type FilterLogicalGroup = FilterCondition | FilterGroup;
export declare class FilterBuilder {
    filter: FilterGroup;
    constructor(filter?: FilterLogicalGroup);
    insert(criteria: FilterLogicalGroup): void;
    insertMany(criteria: FilterLogicalGroup[]): void;
    encode(): string;
    private isFilterCondition;
}
