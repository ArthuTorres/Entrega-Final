import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Directive, Output, HostListener, NgModule, Component, Input, ViewChild } from '@angular/core';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { HttpParams } from '@angular/common/http';
import { FlexLayoutModule } from '@angular/flex-layout';
import { faHome, faBars, faTag, faListCheck, faWrench, faCircleUser, faRightFromBracket, faAdd, faPencil, faTrash, faSearch, faCaretLeft, faCaretRight, faClose, faFileExport, faCaretUp, faCaretDown, faStar, faXmark } from '@fortawesome/free-solid-svg-icons';
import * as i1 from '@fortawesome/angular-fontawesome';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import * as i1$2 from '@angular/forms';
import { FormsModule, ReactiveFormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgxMaskDirective, NgxMaskPipe, provideNgxMask } from 'ngx-mask';
import * as i2 from '@angular/flex-layout/extended';

class AuthService {
    constructor() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: AuthService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: AuthService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: AuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

class ClickOutsideDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.clickOutside = new EventEmitter();
    }
    onClick(targetElement) {
        const isClickedInside = this._elementRef.nativeElement.contains(targetElement);
        if (!isClickedInside)
            this.clickOutside.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ClickOutsideDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.0", type: ClickOutsideDirective, selector: "[clickOutside]", outputs: { clickOutside: "clickOutside" }, host: { listeners: { "document:click": "onClick($event.target)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ClickOutsideDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[clickOutside]'
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { clickOutside: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['document:click', ['$event.target']]
            }] } });

class FilterBuilder {
    constructor(filter) {
        filter = !filter ? { "and": [] } : JSON.parse(JSON.stringify(filter));
        if (this.isFilterCondition(filter))
            filter = { "and": [filter] };
        this.filter = filter;
    }
    insert(criteria) {
        const root = Object.keys(this.filter)[0];
        if (root === 'and') {
            this.filter.and.push(criteria);
        }
        else if (root === 'or') {
            this.filter.or.push(criteria);
        }
        else {
            throw new Error('Operador de grupo inválido.');
        }
    }
    insertMany(criteria) {
        criteria.forEach(c => this.insert(c));
    }
    encode() {
        const json = JSON.stringify(this.filter);
        return btoa(json);
    }
    isFilterCondition(obj) {
        return (obj.hasOwnProperty('=') ||
            obj.hasOwnProperty('<') ||
            obj.hasOwnProperty('<=') ||
            obj.hasOwnProperty('>') ||
            obj.hasOwnProperty('>=') ||
            obj.hasOwnProperty('isnull'));
    }
}

class RestService {
    constructor(http) {
        this.http = http;
    }
    getQuery(filter) {
        let params = new HttpParams();
        if (filter) {
            const builder = new FilterBuilder(filter);
            params = params.append("filter", builder.encode());
        }
        return params;
    }
    query(filter) {
        let params = this.getQuery(filter);
        return this.http.get(this.api, { params });
    }
    paginate(page, pageSize, filter) {
        let params = this.getQuery(filter);
        params = params.append("page", page);
        if (pageSize)
            params = params.append("pagesize", pageSize);
        return this.http.get(this.api, { params });
    }
    lookup(filter) {
        let params = this.getQuery(filter);
        return this.http.get(`${this.api}/lookup`, { params });
    }
    getById(id) {
        return this.http.get(`${this.api}/${id}`);
    }
    insert(dados) {
        return this.http.post(`${this.api}`, dados);
    }
    update(id, dados) {
        return this.http.post(`${this.api}/${id}`, dados);
    }
    delete(id) {
        return this.http.delete(`${this.api}/${id}`);
    }
    bulk(dados) {
        return this.http.post(`${this.api}/bulk`, dados);
    }
}

class SharedModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: SharedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: SharedModule, declarations: [ClickOutsideDirective], imports: [CommonModule,
            FlexLayoutModule], exports: [ClickOutsideDirective,
            FlexLayoutModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: SharedModule, imports: [CommonModule,
            FlexLayoutModule, FlexLayoutModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: SharedModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ClickOutsideDirective
                    ],
                    imports: [
                        CommonModule,
                        FlexLayoutModule
                    ],
                    exports: [
                        ClickOutsideDirective,
                        FlexLayoutModule
                    ]
                }]
        }] });

class AuthModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: AuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: AuthModule, imports: [CommonModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: AuthModule, providers: [
            AuthService,
            SharedModule
        ], imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: AuthModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [
                        CommonModule
                    ],
                    providers: [
                        AuthService,
                        SharedModule
                    ]
                }]
        }] });

class BaseComponent {
    constructor() {
        this.color = "primary";
        this.componentStyle = "flat";
        this.componentSize = "medium";
        this.round = false;
        this.disabled = false;
    }
    ngOnInit() { }
    ngOnDestroy() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: BaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: BaseComponent, selector: "quick-base-component", inputs: { color: "color", componentStyle: "componentStyle", componentSize: "componentSize", round: "round", disabled: "disabled" }, ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: BaseComponent, decorators: [{
            type: Component,
            args: [{
                    'selector': 'quick-base-component',
                    'template': ''
                }]
        }], propDecorators: { color: [{
                type: Input
            }], componentStyle: [{
                type: Input
            }], componentSize: [{
                type: Input
            }], round: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });

const iconMap = {
    'home': faHome,
    'menu': faBars,
    'quotes': faTag,
    'registrations': faListCheck,
    'settings': faWrench,
    'user-photo': faCircleUser,
    'logout': faRightFromBracket,
    'add': faAdd,
    'edit': faPencil,
    'delete': faTrash,
    'search': faSearch,
    'previous': faCaretLeft,
    'next': faCaretRight,
    "close": faClose,
    "export": faFileExport,
    "up": faCaretUp,
    "down": faCaretDown,
    "left": faCaretLeft,
    "right": faCaretRight,
    "star": faStar
};
class IconComponent {
    getIcon() {
        return this.iconName ? iconMap[this.iconName] : faXmark;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: IconComponent, selector: "quick-icon", inputs: { iconName: "iconName" }, ngImport: i0, template: '<fa-icon [icon]="getIcon()"></fa-icon>', isInline: true, dependencies: [{ kind: "component", type: i1.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "animation", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "classes", "transform", "a11yRole"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'quick-icon',
                    template: '<fa-icon [icon]="getIcon()"></fa-icon>'
                }]
        }], propDecorators: { iconName: [{
                type: Input
            }] } });

class ButtonComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.onClick = new EventEmitter();
    }
    buttonClicked(event) {
        this.onClick.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: ButtonComponent, selector: "quick-button", inputs: { icon: "icon", text: "text", hint: "hint" }, outputs: { onClick: "onClick" }, usesInheritance: true, ngImport: i0, template: "<button class=\"control\"\n    [class]=\"[componentStyle, componentSize, color, (icon && !text ? 'icon' : ''), (round? 'round':'')]\"\n    (click)=\"buttonClicked($event)\" [disabled]=\"disabled\" [title]=\"hint || text\">\n    <quick-icon *ngIf=\"icon\" [iconName]=\"icon\" />\n    <span>{{text}}</span>\n</button>", styles: [":host{--button-border-width: 2px}.control{width:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:center;align-items:center;background-color:unset;border:none;border-radius:.5rem;font-weight:500;transition:all ease .2s}.control.small{height:24px;padding:0 12px}.control.small.bordered{padding:0 10px}.control.small.round{border-radius:12px}.control.medium{height:36px;padding:0 18px}.control.medium.bordered{padding:0 16px}.control.medium.round{border-radius:18px}.control.large{height:48px;padding:0 24px}.control.large.round{border-radius:24px}.control.grayed{background-color:var(--gray-300);color:var(--gray-700)}.control.flat.primary{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.bordered.primary{border:solid var(--button-border-width);border-color:var(--primary-color);color:var(--primary-color)}.control.grayed.primary:not(:disabled):hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.flat.accent{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.bordered.accent{border:solid var(--button-border-width);border-color:var(--accent-color);color:var(--accent-color)}.control.grayed.accent:not(:disabled):hover{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.flat.info{background-color:var(--info-color);color:var(--text-info-contrast)}.control.bordered.info{border:solid var(--button-border-width);border-color:var(--info-color);color:var(--info-color)}.control.grayed.info:not(:disabled):hover{background-color:var(--info-color);color:var(--text-info-contrast)}.control.flat.success{background-color:var(--success-color);color:var(--text-success-contrast)}.control.bordered.success{border:solid var(--button-border-width);border-color:var(--success-color);color:var(--success-color)}.control.grayed.success:not(:disabled):hover{background-color:var(--success-color);color:var(--text-success-contrast)}.control.flat.warn{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.bordered.warn{border:solid var(--button-border-width);border-color:var(--warn-color);color:var(--warn-color)}.control.grayed.warn:not(:disabled):hover{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.flat.danger{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.bordered.danger{border:solid var(--button-border-width);border-color:var(--danger-color);color:var(--danger-color)}.control.grayed.danger:not(:disabled):hover{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.flat:not(:disabled):hover{filter:brightness(1.2)}.control.bordered:not(:disabled):hover{filter:brightness(1.2)}.control:disabled,.control.disabled{opacity:.8;filter:unset}\n", ":host{--button-border-width: 2px}.control{cursor:pointer}.control.small{height:24px}.control.small.icon{padding:0;width:24px}.control.small:not(.icon){padding:0 12px}.control.small:not(.icon).bordered{padding:0 10px}.control.small.round{border-radius:12px}.control.medium{height:36px}.control.medium.icon{padding:0;width:36px}.control.medium:not(.icon){padding:0 18px}.control.medium:not(.icon).bordered{padding:0 16px}.control.medium.round{border-radius:18px}.control.large{height:48px}.control.large.icon{padding:0;width:48px}.control.large:not(.icon){padding:0 24px}.control.large:not(.icon).bordered{padding:0 22px}.control.large.round{border-radius:24px}.control:not(.icon) :nth-child(2){margin-left:.5rem}\n"], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IconComponent, selector: "quick-icon", inputs: ["iconName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-button', template: "<button class=\"control\"\n    [class]=\"[componentStyle, componentSize, color, (icon && !text ? 'icon' : ''), (round? 'round':'')]\"\n    (click)=\"buttonClicked($event)\" [disabled]=\"disabled\" [title]=\"hint || text\">\n    <quick-icon *ngIf=\"icon\" [iconName]=\"icon\" />\n    <span>{{text}}</span>\n</button>", styles: [":host{--button-border-width: 2px}.control{width:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:center;align-items:center;background-color:unset;border:none;border-radius:.5rem;font-weight:500;transition:all ease .2s}.control.small{height:24px;padding:0 12px}.control.small.bordered{padding:0 10px}.control.small.round{border-radius:12px}.control.medium{height:36px;padding:0 18px}.control.medium.bordered{padding:0 16px}.control.medium.round{border-radius:18px}.control.large{height:48px;padding:0 24px}.control.large.round{border-radius:24px}.control.grayed{background-color:var(--gray-300);color:var(--gray-700)}.control.flat.primary{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.bordered.primary{border:solid var(--button-border-width);border-color:var(--primary-color);color:var(--primary-color)}.control.grayed.primary:not(:disabled):hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.flat.accent{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.bordered.accent{border:solid var(--button-border-width);border-color:var(--accent-color);color:var(--accent-color)}.control.grayed.accent:not(:disabled):hover{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.flat.info{background-color:var(--info-color);color:var(--text-info-contrast)}.control.bordered.info{border:solid var(--button-border-width);border-color:var(--info-color);color:var(--info-color)}.control.grayed.info:not(:disabled):hover{background-color:var(--info-color);color:var(--text-info-contrast)}.control.flat.success{background-color:var(--success-color);color:var(--text-success-contrast)}.control.bordered.success{border:solid var(--button-border-width);border-color:var(--success-color);color:var(--success-color)}.control.grayed.success:not(:disabled):hover{background-color:var(--success-color);color:var(--text-success-contrast)}.control.flat.warn{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.bordered.warn{border:solid var(--button-border-width);border-color:var(--warn-color);color:var(--warn-color)}.control.grayed.warn:not(:disabled):hover{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.flat.danger{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.bordered.danger{border:solid var(--button-border-width);border-color:var(--danger-color);color:var(--danger-color)}.control.grayed.danger:not(:disabled):hover{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.flat:not(:disabled):hover{filter:brightness(1.2)}.control.bordered:not(:disabled):hover{filter:brightness(1.2)}.control:disabled,.control.disabled{opacity:.8;filter:unset}\n", ":host{--button-border-width: 2px}.control{cursor:pointer}.control.small{height:24px}.control.small.icon{padding:0;width:24px}.control.small:not(.icon){padding:0 12px}.control.small:not(.icon).bordered{padding:0 10px}.control.small.round{border-radius:12px}.control.medium{height:36px}.control.medium.icon{padding:0;width:36px}.control.medium:not(.icon){padding:0 18px}.control.medium:not(.icon).bordered{padding:0 16px}.control.medium.round{border-radius:18px}.control.large{height:48px}.control.large.icon{padding:0;width:48px}.control.large:not(.icon){padding:0 24px}.control.large:not(.icon).bordered{padding:0 22px}.control.large.round{border-radius:24px}.control:not(.icon) :nth-child(2){margin-left:.5rem}\n"] }]
        }], propDecorators: { icon: [{
                type: Input
            }], text: [{
                type: Input
            }], hint: [{
                type: Input
            }], onClick: [{
                type: Output
            }] } });

class ShadowboxComponent {
    constructor() {
        this.images = [];
        this.current = 0;
        this.visible = false;
    }
    show() {
        this.visible = true;
    }
    dismiss() {
        this.visible = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ShadowboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.0", type: ShadowboxComponent, selector: "quick-shadowbox", inputs: { images: "images", current: "current" }, ngImport: i0, template: "<div class=\"shadowbox\" *ngIf=\"visible\">\n    <div class=\"backdrop\"></div>\n\n    <div class=\"big-picture\" (click)=\"dismiss()\">\n        <img *ngIf=\"images[current]\" [src]=\"images[current].url\">\n    </div>\n\n    <ul class=\"slider\">\n        @for(image of images; track image; let i = $index){\n        <li (click)=\"current = i\"><img [src]=\"image.url\" /></li>\n        }\n    </ul>\n\n    <quick-button class=\"close-button\" (onClick)=\"dismiss()\" icon=\"close\" [round]=\"true\" componentSize=\"small\" />\n</div>", styles: [".shadowbox{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1000;display:flex;flex-direction:column}.backdrop{z-index:1001;background-color:#000;opacity:.6;position:absolute;top:0;left:0;width:100%;height:100%}.big-picture,.slider,.close-button{z-index:1010}.big-picture{display:flex;flex-direction:row;flex:1;justify-content:center;align-items:center;max-height:100%;max-width:100%;overflow:hidden}.big-picture img{max-height:100%;max-width:100%}.slider{height:110px;overflow-x:auto;display:flex;flex-direction:row;column-gap:.5rem;align-items:center}.slider li{box-sizing:border-box;cursor:pointer;opacity:.8;transition:all ease-in .2s}.slider li:hover{opacity:1}.slider li img{max-width:92px;max-height:92px}.close-button{position:absolute;right:0;top:0;margin:1.25rem}\n"], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: ButtonComponent, selector: "quick-button", inputs: ["icon", "text", "hint"], outputs: ["onClick"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ShadowboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-shadowbox', template: "<div class=\"shadowbox\" *ngIf=\"visible\">\n    <div class=\"backdrop\"></div>\n\n    <div class=\"big-picture\" (click)=\"dismiss()\">\n        <img *ngIf=\"images[current]\" [src]=\"images[current].url\">\n    </div>\n\n    <ul class=\"slider\">\n        @for(image of images; track image; let i = $index){\n        <li (click)=\"current = i\"><img [src]=\"image.url\" /></li>\n        }\n    </ul>\n\n    <quick-button class=\"close-button\" (onClick)=\"dismiss()\" icon=\"close\" [round]=\"true\" componentSize=\"small\" />\n</div>", styles: [".shadowbox{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1000;display:flex;flex-direction:column}.backdrop{z-index:1001;background-color:#000;opacity:.6;position:absolute;top:0;left:0;width:100%;height:100%}.big-picture,.slider,.close-button{z-index:1010}.big-picture{display:flex;flex-direction:row;flex:1;justify-content:center;align-items:center;max-height:100%;max-width:100%;overflow:hidden}.big-picture img{max-height:100%;max-width:100%}.slider{height:110px;overflow-x:auto;display:flex;flex-direction:row;column-gap:.5rem;align-items:center}.slider li{box-sizing:border-box;cursor:pointer;opacity:.8;transition:all ease-in .2s}.slider li:hover{opacity:1}.slider li img{max-width:92px;max-height:92px}.close-button{position:absolute;right:0;top:0;margin:1.25rem}\n"] }]
        }], propDecorators: { images: [{
                type: Input
            }], current: [{
                type: Input
            }] } });

class PhotoGaleryComponent {
    constructor() {
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onRemove = new EventEmitter();
        this.images = [];
        this.preview = 0;
    }
    onFileSelected(event) {
        const files = event.target.files;
        this.addImages(files);
    }
    onDragOver(event) {
        event.preventDefault();
    }
    onDrop(event) {
        event.preventDefault();
        const files = event.dataTransfer?.files || new FileList();
        this.addImages(files);
    }
    addImages(files) {
        const loadImage = (file) => {
            return new Promise(resolve => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    resolve({ url: e.target.result, file });
                };
                reader.readAsDataURL(file);
            });
        };
        const tasks = [];
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            tasks.push(loadImage(file));
        }
        Promise.all(tasks).then(images => {
            this.images.push(...images);
            this.onChange.emit(this.images);
        });
    }
    removeImage(image) {
        const index = this.images.indexOf(image);
        if (index !== -1) {
            this.images.splice(index, 1);
            this.onRemove.emit(image);
            this.onChange.emit(this.images);
        }
    }
    openFilePicker() {
        this.fileInput?.nativeElement.click();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: PhotoGaleryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.0", type: PhotoGaleryComponent, selector: "quick-photo-galery", inputs: { disabled: "disabled", images: "images" }, outputs: { onChange: "onChange", onRemove: "onRemove" }, viewQueries: [{ propertyName: "fileInput", first: true, predicate: ["fileInput"], descendants: true }], ngImport: i0, template: "<quick-shadowbox #shadowbox [images]=\"images\" [current]=\"preview\" />\n\n<div class=\"upload-images\">\n    @if(!disabled){<div class=\"drop-area\" (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\"\n        (click)=\"openFilePicker()\">\n        Arraste e solte as imagens aqui ou clique para selecionar arquivos\n        <input type=\"file\" multiple (change)=\"onFileSelected($event)\" #fileInput>\n    </div>}\n\n    <div class=\"thumbnails\">\n        <div *ngFor=\"let image of images; let i = index\" class=\"thumbnail\">\n            <img [src]=\"image.url\" alt=\"Imagem\" (click)=\"preview = i; shadowbox.show()\">\n            @if(!disabled){\n            <quick-button class=\"btn-delete\" icon=\"delete\" componentSize=\"small\" hint=\"Excluir imagem\" color=\"danger\"\n                [round]=\"true\" (onClick)=\"removeImage(image)\" />\n            }\n        </div>\n    </div>\n</div>", styles: [".upload-images{display:flex;flex-direction:column}.drop-area{border:2px dashed #ccc;padding:20px;cursor:pointer;font-weight:500;color:var(--gray-700);text-align:center;text-wrap:wrap}.thumbnails{display:flex;flex-wrap:wrap}.thumbnail{margin:10px;position:relative}.thumbnail img{max-width:100px;max-height:100px;cursor:pointer}input[type=file]{display:none}.btn-delete{position:absolute;margin:.2rem;right:0}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: ButtonComponent, selector: "quick-button", inputs: ["icon", "text", "hint"], outputs: ["onClick"] }, { kind: "component", type: ShadowboxComponent, selector: "quick-shadowbox", inputs: ["images", "current"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: PhotoGaleryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-photo-galery', template: "<quick-shadowbox #shadowbox [images]=\"images\" [current]=\"preview\" />\n\n<div class=\"upload-images\">\n    @if(!disabled){<div class=\"drop-area\" (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\"\n        (click)=\"openFilePicker()\">\n        Arraste e solte as imagens aqui ou clique para selecionar arquivos\n        <input type=\"file\" multiple (change)=\"onFileSelected($event)\" #fileInput>\n    </div>}\n\n    <div class=\"thumbnails\">\n        <div *ngFor=\"let image of images; let i = index\" class=\"thumbnail\">\n            <img [src]=\"image.url\" alt=\"Imagem\" (click)=\"preview = i; shadowbox.show()\">\n            @if(!disabled){\n            <quick-button class=\"btn-delete\" icon=\"delete\" componentSize=\"small\" hint=\"Excluir imagem\" color=\"danger\"\n                [round]=\"true\" (onClick)=\"removeImage(image)\" />\n            }\n        </div>\n    </div>\n</div>", styles: [".upload-images{display:flex;flex-direction:column}.drop-area{border:2px dashed #ccc;padding:20px;cursor:pointer;font-weight:500;color:var(--gray-700);text-align:center;text-wrap:wrap}.thumbnails{display:flex;flex-wrap:wrap}.thumbnail{margin:10px;position:relative}.thumbnail img{max-width:100px;max-height:100px;cursor:pointer}input[type=file]{display:none}.btn-delete{position:absolute;margin:.2rem;right:0}\n"] }]
        }], propDecorators: { disabled: [{
                type: Input
            }], fileInput: [{
                type: ViewChild,
                args: ['fileInput']
            }], onChange: [{
                type: Output
            }], onRemove: [{
                type: Output
            }], images: [{
                type: Input
            }] } });

class ToolbarComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ToolbarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: ToolbarComponent, selector: "quick-toolbar", inputs: { pageTitle: "pageTitle" }, ngImport: i0, template: "<div class=\"toolbar\">\n    <div class=\"container\">\n        <div class=\"page-info fx-row\">\n            <h1>{{pageTitle}}</h1>\n        </div>\n        <div class=\"page-actions fx-row\">\n            <ng-content select=\".page-action\"></ng-content>\n        </div>\n    </div>\n</div>", styles: [".toolbar{padding:1rem 0}.toolbar .container{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;align-items:center}.toolbar .container .page-info{display:flex;flex-direction:row}.toolbar .container .page-info h1{color:var(--gray-800);font-weight:600}.toolbar .container .page-actions{display:flex;flex-direction:row;column-gap:.25rem}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-toolbar', template: "<div class=\"toolbar\">\n    <div class=\"container\">\n        <div class=\"page-info fx-row\">\n            <h1>{{pageTitle}}</h1>\n        </div>\n        <div class=\"page-actions fx-row\">\n            <ng-content select=\".page-action\"></ng-content>\n        </div>\n    </div>\n</div>", styles: [".toolbar{padding:1rem 0}.toolbar .container{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;align-items:center}.toolbar .container .page-info{display:flex;flex-direction:row}.toolbar .container .page-info h1{color:var(--gray-800);font-weight:600}.toolbar .container .page-actions{display:flex;flex-direction:row;column-gap:.25rem}\n"] }]
        }], propDecorators: { pageTitle: [{
                type: Input
            }] } });

class ColumnComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ColumnComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: ColumnComponent, selector: "quick-column", ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{display:flex;flex-direction:column;row-gap:.125rem}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ColumnComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-column', template: "<ng-content></ng-content>", styles: [":host{display:flex;flex-direction:column;row-gap:.125rem}\n"] }]
        }] });

class RowComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: RowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: RowComponent, selector: "quick-row", ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{display:flex;flex-direction:row;column-gap:.5rem;flex-wrap:wrap}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: RowComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-row', template: "<ng-content></ng-content>", styles: [":host{display:flex;flex-direction:row;column-gap:.5rem;flex-wrap:wrap}\n"] }]
        }] });

class CardComponent {
    constructor() {
        this.options = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: CardComponent, selector: "quick-card", inputs: { options: "options" }, ngImport: i0, template: "<div class=\"card\">\n    <ng-content select=\"quick-card-header\"></ng-content>\n    <ng-content select=\"quick-card-body\"></ng-content>\n</div>", styles: [".card{display:flex;flex-direction:column;background-color:var(--background-light);color:var(--gray-900);border-radius:.25rem;border:1px solid var(--gray-200);box-shadow:0 3px 4px #00000008;padding:1.75rem 2.25rem}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-card', template: "<div class=\"card\">\n    <ng-content select=\"quick-card-header\"></ng-content>\n    <ng-content select=\"quick-card-body\"></ng-content>\n</div>", styles: [".card{display:flex;flex-direction:column;background-color:var(--background-light);color:var(--gray-900);border-radius:.25rem;border:1px solid var(--gray-200);box-shadow:0 3px 4px #00000008;padding:1.75rem 2.25rem}\n"] }]
        }], propDecorators: { options: [{
                type: Input
            }] } });

class CardHeaderComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: CardHeaderComponent, selector: "quick-card-header", ngImport: i0, template: "<ng-content select=\"quick-card-title\"></ng-content>", styles: [":host{display:flex;justify-content:space-between;align-items:stretch;flex-wrap:wrap;padding-bottom:1.25rem}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-card-header', template: "<ng-content select=\"quick-card-title\"></ng-content>", styles: [":host{display:flex;justify-content:space-between;align-items:stretch;flex-wrap:wrap;padding-bottom:1.25rem}\n"] }]
        }] });

class CardTitleComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: CardTitleComponent, selector: "quick-card-title", ngImport: i0, template: "<ng-content select=\"\"></ng-content>", styles: [":host{font-weight:500;font-size:1.275rem}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardTitleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-card-title', template: "<ng-content select=\"\"></ng-content>", styles: [":host{font-weight:500;font-size:1.275rem}\n"] }]
        }] });

class CardBodyComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardBodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: CardBodyComponent, selector: "quick-card-body", ngImport: i0, template: "<ng-content></ng-content>", styles: [""] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-card-body', template: "<ng-content></ng-content>" }]
        }] });

class CardModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: CardModule, declarations: [CardComponent,
            CardHeaderComponent,
            CardTitleComponent,
            CardBodyComponent], exports: [CardComponent,
            CardHeaderComponent,
            CardTitleComponent,
            CardBodyComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        CardComponent,
                        CardHeaderComponent,
                        CardTitleComponent,
                        CardBodyComponent
                    ],
                    exports: [
                        CardComponent,
                        CardHeaderComponent,
                        CardTitleComponent,
                        CardBodyComponent
                    ]
                }]
        }] });

class IconModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: IconModule, declarations: [IconComponent], imports: [FontAwesomeModule], exports: [IconComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IconModule, imports: [FontAwesomeModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IconModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        IconComponent
                    ],
                    imports: [
                        FontAwesomeModule,
                    ],
                    exports: [
                        IconComponent
                    ]
                }]
        }] });

class ButtonModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: ButtonModule, declarations: [ButtonComponent], imports: [CommonModule,
            IconModule], exports: [ButtonComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ButtonModule, imports: [CommonModule,
            IconModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ButtonComponent
                    ],
                    imports: [
                        CommonModule,
                        IconModule
                    ],
                    exports: [
                        ButtonComponent
                    ]
                }]
        }] });

class DatagridComponent {
    constructor() {
        this.data = [];
        this.onLoadRequested = new EventEmitter();
        this.onEditRequested = new EventEmitter();
        this.onDeleteRequested = new EventEmitter();
    }
    getProperty(obj, column) {
        const keys = column.path.split(".");
        let value = "";
        keys.forEach(key => value = (!value ? obj : value)[key]);
        if (column.formatFn)
            return column.formatFn(value);
        return value;
    }
    edit(item) {
        this.onEditRequested.emit(item.id);
    }
    askForDelete(item) {
        if (!confirm("Confirma a exclusão do registro selecionado? essa operação não pode ser desfeita!"))
            return;
        this.onDeleteRequested.emit(item.id);
    }
    nextPage() {
        if (!this.pagination)
            return;
        this.pagination.currentPage++;
        this.onLoadRequested.emit(this.pagination);
    }
    changePage(pageNumber) {
        if (!this.pagination)
            return;
        this.pagination.currentPage = pageNumber;
        this.onLoadRequested.emit(this.pagination);
    }
    previousPage() {
        if (!this.pagination)
            return;
        this.pagination.currentPage--;
        this.onLoadRequested.emit(this.pagination);
    }
    changePageSize($event) {
        if (!this.pagination)
            return;
        this.pagination.pageSize = $event;
        this.onLoadRequested.emit(this.pagination);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DatagridComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DatagridComponent, selector: "quick-datagrid", inputs: { data: "data", pagination: "pagination", options: "options" }, outputs: { onLoadRequested: "onLoadRequested", onEditRequested: "onEditRequested", onDeleteRequested: "onDeleteRequested" }, ngImport: i0, template: "<quick-column *ngIf=\"options\">\n    <table>\n        <thead>\n            <tr>\n                <th *ngFor=\"let column of options.columns\">{{column.label}}</th>\n                <th *ngIf=\"options.showAuditTimestamps\">Cadastrado em</th>\n                <th *ngIf=\"options.showAuditTimestamps\">\u00DAltima atualiza\u00E7\u00E3o</th>\n                <th *ngIf=\"options.canEdit || options.canDelete\" align=\"center\" width=\"60\">Op\u00E7\u00F5es</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let item of data\">\n                <td *ngFor=\"let column of options.columns\">{{getProperty(item, column)}}</td>\n                <td *ngIf=\"options.showAuditTimestamps\">{{item.created_at | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n                <td *ngIf=\"options.showAuditTimestamps\">{{item.updated_at | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n                <td *ngIf=\"options.canEdit || options.canDelete\" align=\"center\">\n                    <quick-row>\n                        <quick-button *ngIf=\"options.canEdit\" icon=\"edit\" hint=\"Editar registro\" componentSize=\"small\"\n                            componentStyle=\"grayed\" (onClick)=\"edit(item)\" />\n                        <quick-button *ngIf=\"options.canDelete\" icon=\"delete\" hint=\"Excluir registro\"\n                            componentSize=\"small\" componentStyle=\"grayed\" (onClick)=\"askForDelete(item)\"\n                            color=\"danger\" />\n                    </quick-row>\n                    <!-- <quick-row>\n                    </quick-row> -->\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <div class=\"paginator\" *ngIf=\"pagination\">\n        <quick-row>\n            <!-- <quick-picker componentSize=\"small\" componentStyle=\"grayed\" [options]=\"pagination.pageSizes\"\n                [value]=\"pagination.pageSize\" (onChange)=\"changePageSize($event)\" /> -->\n            <span class=\"fx-1\"></span>\n            <quick-row *ngIf=\"pagination.pageCount && pagination.pageCount > 1\">\n                <quick-button componentSize=\"small\" icon=\"previous\" componentStyle=\"grayed\"\n                    *ngIf=\"pagination.currentPage > 1\" (onClick)=\"previousPage()\" />\n                <quick-button componentSize=\"small\" *ngFor=\"let pageNum of pagination.pages\" [text]=\"pageNum.toString()\"\n                    [componentStyle]=\"pagination.currentPage == pageNum ? 'flat' : 'grayed'\"\n                    (onClick)=\"changePage(pageNum)\" />\n                <quick-button componentSize=\"small\" icon=\"next\" componentStyle=\"grayed\"\n                    *ngIf=\"pagination.currentPage < pagination.pageCount\" (onClick)=\"nextPage()\" />\n            </quick-row>\n        </quick-row>\n    </div>\n</quick-column>", styles: [".paginator{padding:1rem 0}.paginator select{border:none}.paginator select:focus{outline:0}table{color:var(--gray-900);width:100%}table thead tr,table tbody tr,table tfoot tr{border-bottom-width:1px;border-bottom-style:dashed;border-bottom-color:var(--gray-300)}table thead tr td,table thead tr th,table tbody tr td,table tbody tr th,table tfoot tr td,table tfoot tr th{padding:1rem .5rem;text-wrap:nowrap}table thead tr td.text-right,table thead tr th.text-right,table tbody tr td.text-right,table tbody tr th.text-right,table tfoot tr td.text-right,table tfoot tr th.text-right{text-align:right}table thead,table tfoot{text-align:left;font-size:.8rem;color:var(--gray-600);text-transform:uppercase;font-weight:600}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: ButtonComponent, selector: "quick-button", inputs: ["icon", "text", "hint"], outputs: ["onClick"] }, { kind: "component", type: ColumnComponent, selector: "quick-column" }, { kind: "component", type: RowComponent, selector: "quick-row" }, { kind: "pipe", type: i1$1.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DatagridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-datagrid', template: "<quick-column *ngIf=\"options\">\n    <table>\n        <thead>\n            <tr>\n                <th *ngFor=\"let column of options.columns\">{{column.label}}</th>\n                <th *ngIf=\"options.showAuditTimestamps\">Cadastrado em</th>\n                <th *ngIf=\"options.showAuditTimestamps\">\u00DAltima atualiza\u00E7\u00E3o</th>\n                <th *ngIf=\"options.canEdit || options.canDelete\" align=\"center\" width=\"60\">Op\u00E7\u00F5es</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let item of data\">\n                <td *ngFor=\"let column of options.columns\">{{getProperty(item, column)}}</td>\n                <td *ngIf=\"options.showAuditTimestamps\">{{item.created_at | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n                <td *ngIf=\"options.showAuditTimestamps\">{{item.updated_at | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n                <td *ngIf=\"options.canEdit || options.canDelete\" align=\"center\">\n                    <quick-row>\n                        <quick-button *ngIf=\"options.canEdit\" icon=\"edit\" hint=\"Editar registro\" componentSize=\"small\"\n                            componentStyle=\"grayed\" (onClick)=\"edit(item)\" />\n                        <quick-button *ngIf=\"options.canDelete\" icon=\"delete\" hint=\"Excluir registro\"\n                            componentSize=\"small\" componentStyle=\"grayed\" (onClick)=\"askForDelete(item)\"\n                            color=\"danger\" />\n                    </quick-row>\n                    <!-- <quick-row>\n                    </quick-row> -->\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <div class=\"paginator\" *ngIf=\"pagination\">\n        <quick-row>\n            <!-- <quick-picker componentSize=\"small\" componentStyle=\"grayed\" [options]=\"pagination.pageSizes\"\n                [value]=\"pagination.pageSize\" (onChange)=\"changePageSize($event)\" /> -->\n            <span class=\"fx-1\"></span>\n            <quick-row *ngIf=\"pagination.pageCount && pagination.pageCount > 1\">\n                <quick-button componentSize=\"small\" icon=\"previous\" componentStyle=\"grayed\"\n                    *ngIf=\"pagination.currentPage > 1\" (onClick)=\"previousPage()\" />\n                <quick-button componentSize=\"small\" *ngFor=\"let pageNum of pagination.pages\" [text]=\"pageNum.toString()\"\n                    [componentStyle]=\"pagination.currentPage == pageNum ? 'flat' : 'grayed'\"\n                    (onClick)=\"changePage(pageNum)\" />\n                <quick-button componentSize=\"small\" icon=\"next\" componentStyle=\"grayed\"\n                    *ngIf=\"pagination.currentPage < pagination.pageCount\" (onClick)=\"nextPage()\" />\n            </quick-row>\n        </quick-row>\n    </div>\n</quick-column>", styles: [".paginator{padding:1rem 0}.paginator select{border:none}.paginator select:focus{outline:0}table{color:var(--gray-900);width:100%}table thead tr,table tbody tr,table tfoot tr{border-bottom-width:1px;border-bottom-style:dashed;border-bottom-color:var(--gray-300)}table thead tr td,table thead tr th,table tbody tr td,table tbody tr th,table tfoot tr td,table tfoot tr th{padding:1rem .5rem;text-wrap:nowrap}table thead tr td.text-right,table thead tr th.text-right,table tbody tr td.text-right,table tbody tr th.text-right,table tfoot tr td.text-right,table tfoot tr th.text-right{text-align:right}table thead,table tfoot{text-align:left;font-size:.8rem;color:var(--gray-600);text-transform:uppercase;font-weight:600}\n"] }]
        }], propDecorators: { data: [{
                type: Input
            }], pagination: [{
                type: Input
            }], options: [{
                type: Input
            }], onLoadRequested: [{
                type: Output
            }], onEditRequested: [{
                type: Output
            }], onDeleteRequested: [{
                type: Output
            }] } });

class RatingBadgeComponent {
    constructor() {
        this.rating = 0;
        this.color = 'primary';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: RatingBadgeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: RatingBadgeComponent, selector: "quick-rating-badge", inputs: { rating: "rating", color: "color" }, ngImport: i0, template: "<div class=\"wrapper {{color}}\">\n    <quick-row>\n        <quick-icon iconName=\"star\" />\n        <p class=\"rating\">{{rating|number:'1.2-2'}}</p>\n    </quick-row>\n</div>", styles: [".wrapper{box-sizing:border-box;padding:.5rem .75rem;border-radius:.25rem}.wrapper.primary{background-color:var(--primary-color);color:var(--text-primary-contrast)}.wrapper.accent{background-color:var(--accent-color);color:var(--text-accent-contrast)}.wrapper.info{background-color:var(--info-color);color:var(--text-info-contrast)}.wrapper.success{background-color:var(--success-color);color:var(--text-success-contrast)}.wrapper.warn{background-color:var(--warn-color);color:var(--text-warn-contrast)}.wrapper.danger{background-color:var(--danger-color);color:var(--text-danger-contrast)}\n"], dependencies: [{ kind: "component", type: IconComponent, selector: "quick-icon", inputs: ["iconName"] }, { kind: "component", type: RowComponent, selector: "quick-row" }, { kind: "pipe", type: i1$1.DecimalPipe, name: "number" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: RatingBadgeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-rating-badge', template: "<div class=\"wrapper {{color}}\">\n    <quick-row>\n        <quick-icon iconName=\"star\" />\n        <p class=\"rating\">{{rating|number:'1.2-2'}}</p>\n    </quick-row>\n</div>", styles: [".wrapper{box-sizing:border-box;padding:.5rem .75rem;border-radius:.25rem}.wrapper.primary{background-color:var(--primary-color);color:var(--text-primary-contrast)}.wrapper.accent{background-color:var(--accent-color);color:var(--text-accent-contrast)}.wrapper.info{background-color:var(--info-color);color:var(--text-info-contrast)}.wrapper.success{background-color:var(--success-color);color:var(--text-success-contrast)}.wrapper.warn{background-color:var(--warn-color);color:var(--text-warn-contrast)}.wrapper.danger{background-color:var(--danger-color);color:var(--text-danger-contrast)}\n"] }]
        }], propDecorators: { rating: [{
                type: Input
            }], color: [{
                type: Input
            }] } });

class UiModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: UiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: UiModule, declarations: [ColumnComponent,
            RowComponent,
            ToolbarComponent,
            DatagridComponent,
            RatingBadgeComponent], imports: [CommonModule,
            SharedModule,
            ButtonModule,
            FormsModule,
            IconModule], exports: [ButtonModule,
            ColumnComponent,
            CardModule,
            DatagridComponent,
            IconModule,
            RowComponent,
            RatingBadgeComponent,
            ToolbarComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: UiModule, imports: [CommonModule,
            SharedModule,
            ButtonModule,
            FormsModule,
            IconModule, ButtonModule,
            CardModule,
            IconModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: UiModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ColumnComponent,
                        RowComponent,
                        ToolbarComponent,
                        DatagridComponent,
                        RatingBadgeComponent
                    ],
                    imports: [
                        CommonModule,
                        SharedModule,
                        ButtonModule,
                        FormsModule,
                        IconModule
                    ],
                    exports: [
                        ButtonModule,
                        ColumnComponent,
                        CardModule,
                        DatagridComponent,
                        IconModule,
                        RowComponent,
                        RatingBadgeComponent,
                        ToolbarComponent,
                    ]
                }]
        }] });

class ModalsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ModalsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: ModalsModule, declarations: [ShadowboxComponent], imports: [CommonModule,
            ButtonModule], exports: [ShadowboxComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ModalsModule, imports: [CommonModule,
            ButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: ModalsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ShadowboxComponent
                    ],
                    imports: [
                        CommonModule,
                        ButtonModule
                    ],
                    exports: [
                        ShadowboxComponent
                    ]
                }]
        }] });

class FileManagerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FileManagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: FileManagerModule, declarations: [PhotoGaleryComponent], imports: [CommonModule,
            ButtonModule,
            ModalsModule], exports: [PhotoGaleryComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FileManagerModule, imports: [CommonModule,
            ButtonModule,
            ModalsModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FileManagerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        PhotoGaleryComponent
                    ],
                    imports: [
                        CommonModule,
                        ButtonModule,
                        ModalsModule
                    ],
                    exports: [
                        PhotoGaleryComponent
                    ]
                }]
        }] });

class FormFieldComponent {
    constructor() {
        this.fieldTypes = ["input", "textarea", "select"];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: FormFieldComponent, selector: "quick-form-field", ngImport: i0, template: "<ng-content select=\"label\"></ng-content>\n<ng-content select=\"input, textarea, select, quick-star-rating\"></ng-content>\n<ng-content select=\"quick-form-autocomplete\"></ng-content>\n<div class=\"info\">\n    <ng-content select=\"quick-form-error\"></ng-content>\n</div>", styles: [":host{box-sizing:border-box;display:flex;flex-direction:column;flex:1;margin-bottom:.3rem}:host ::ng-deep label{margin-bottom:.5rem;font-weight:500;color:var(--gray-700);transition:all .15s ease-in-out}:host ::ng-deep input:not([type=checkbox]),:host ::ng-deep select,:host ::ng-deep textarea{box-sizing:border-box;display:block;min-width:240px;width:100%;padding:.75rem;font-weight:500;color:var(--gray-700);appearance:none;background-color:var(--body-bg);background-clip:padding-box;border:1px solid var(--gray-300);border-radius:.5rem;box-shadow:false;transition:all .15s ease-in-out}:host ::ng-deep input:not([type=checkbox]):focus,:host ::ng-deep select:focus,:host ::ng-deep textarea:focus{color:var(--gray-700);background-color:var(--body-bg);border-color:var(--gray-400);outline:0}:host ::ng-deep input:not([type=checkbox]):disabled,:host ::ng-deep select:disabled,:host ::ng-deep textarea:disabled{opacity:.6}:host ::ng-deep textarea{resize:none}.info{position:relative;overflow:hidden;height:1.2rem}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-form-field', template: "<ng-content select=\"label\"></ng-content>\n<ng-content select=\"input, textarea, select, quick-star-rating\"></ng-content>\n<ng-content select=\"quick-form-autocomplete\"></ng-content>\n<div class=\"info\">\n    <ng-content select=\"quick-form-error\"></ng-content>\n</div>", styles: [":host{box-sizing:border-box;display:flex;flex-direction:column;flex:1;margin-bottom:.3rem}:host ::ng-deep label{margin-bottom:.5rem;font-weight:500;color:var(--gray-700);transition:all .15s ease-in-out}:host ::ng-deep input:not([type=checkbox]),:host ::ng-deep select,:host ::ng-deep textarea{box-sizing:border-box;display:block;min-width:240px;width:100%;padding:.75rem;font-weight:500;color:var(--gray-700);appearance:none;background-color:var(--body-bg);background-clip:padding-box;border:1px solid var(--gray-300);border-radius:.5rem;box-shadow:false;transition:all .15s ease-in-out}:host ::ng-deep input:not([type=checkbox]):focus,:host ::ng-deep select:focus,:host ::ng-deep textarea:focus{color:var(--gray-700);background-color:var(--body-bg);border-color:var(--gray-400);outline:0}:host ::ng-deep input:not([type=checkbox]):disabled,:host ::ng-deep select:disabled,:host ::ng-deep textarea:disabled{opacity:.6}:host ::ng-deep textarea{resize:none}.info{position:relative;overflow:hidden;height:1.2rem}\n"] }]
        }] });

class FormAutocompleteComponent {
    constructor() {
        this.options = [];
        this.filterText = "";
        this.isVisible = false;
    }
    ngOnInit() {
        if (this.target) {
            this.target.autocomplete = "off";
            this.target.addEventListener('focus', this.onTargetFocus.bind(this));
            this.target.addEventListener('blur', this.onTargetBlur.bind(this));
            this.target.addEventListener('input', this.onTargetInput.bind(this));
        }
    }
    onTargetFocus(ev) {
        this.isVisible = true;
        if (this.target)
            this.filterText = this.target.value;
    }
    onTargetBlur(ev) {
        setTimeout(() => {
            this.isVisible = false;
        }, 150);
    }
    onTargetInput(ev) {
        if (this.target)
            this.filterText = this.target.value;
    }
    select(value) {
        if (this.control) {
            this.control.setValue(value);
        }
        else if (this.target) {
            this.target.value = value;
        }
    }
    get filteredOptions() {
        return this.options.filter(o => o.toLowerCase().includes(this.filterText.toLowerCase()));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormAutocompleteComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: FormAutocompleteComponent, selector: "quick-form-autocomplete", inputs: { options: "options", target: "target", control: "control" }, ngImport: i0, template: "<ul class=\"autocomplete-wrapper\" *ngIf=\"isVisible && options.length > 0\">\n    <li class=\"autocomplete-option\" *ngFor=\"let option of filteredOptions\" (click)=\"select(option)\">{{option}}</li>\n</ul>", styles: [":host{position:relative}ul{z-index:100;background-color:#fff;position:absolute;border:1px solid var(--gray-300);border-radius:.5rem;width:100%;overflow:hidden;overflow-y:scroll;max-height:200px}ul li{padding:.5rem;font-weight:500;color:var(--gray-700);cursor:pointer}ul li:hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-form-autocomplete', template: "<ul class=\"autocomplete-wrapper\" *ngIf=\"isVisible && options.length > 0\">\n    <li class=\"autocomplete-option\" *ngFor=\"let option of filteredOptions\" (click)=\"select(option)\">{{option}}</li>\n</ul>", styles: [":host{position:relative}ul{z-index:100;background-color:#fff;position:absolute;border:1px solid var(--gray-300);border-radius:.5rem;width:100%;overflow:hidden;overflow-y:scroll;max-height:200px}ul li{padding:.5rem;font-weight:500;color:var(--gray-700);cursor:pointer}ul li:hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}\n"] }]
        }], propDecorators: { options: [{
                type: Input
            }], target: [{
                type: Input
            }], control: [{
                type: Input
            }] } });

class FormErrorComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: FormErrorComponent, selector: "quick-form-error", ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{position:absolute;font-size:.8rem;color:var(--danger-color);margin:.25rem;font-weight:500;-webkit-animation-name:fadeInDown;animation-name:fadeInDown;-webkit-animation-duration:.5s;animation-duration:.5s;-webkit-animation-fill-mode:both;animation-fill-mode:both}@-webkit-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);transform:translate3d(0,-100%,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);transform:translate3d(0,-100%,0)}to{opacity:1;-webkit-transform:none;transform:none}}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormErrorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-form-error', template: "<ng-content></ng-content>", styles: [":host{position:absolute;font-size:.8rem;color:var(--danger-color);margin:.25rem;font-weight:500;-webkit-animation-name:fadeInDown;animation-name:fadeInDown;-webkit-animation-duration:.5s;animation-duration:.5s;-webkit-animation-fill-mode:both;animation-fill-mode:both}@-webkit-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);transform:translate3d(0,-100%,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);transform:translate3d(0,-100%,0)}to{opacity:1;-webkit-transform:none;transform:none}}\n"] }]
        }] });

class QuickFormsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: QuickFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: QuickFormsModule, declarations: [FormFieldComponent,
            FormAutocompleteComponent,
            FormErrorComponent], imports: [CommonModule,
            SharedModule,
            FormsModule,
            ReactiveFormsModule,
            NgxMaskDirective,
            NgxMaskPipe], exports: [FormsModule,
            ReactiveFormsModule,
            FormFieldComponent,
            FormAutocompleteComponent,
            FormErrorComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: QuickFormsModule, providers: [
            provideNgxMask()
        ], imports: [CommonModule,
            SharedModule,
            FormsModule,
            ReactiveFormsModule, FormsModule,
            ReactiveFormsModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: QuickFormsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        FormFieldComponent,
                        FormAutocompleteComponent,
                        FormErrorComponent
                    ],
                    imports: [
                        CommonModule,
                        SharedModule,
                        FormsModule,
                        ReactiveFormsModule,
                        NgxMaskDirective,
                        NgxMaskPipe
                    ],
                    providers: [
                        provideNgxMask()
                    ],
                    exports: [
                        FormsModule,
                        ReactiveFormsModule,
                        FormFieldComponent,
                        FormAutocompleteComponent,
                        FormErrorComponent
                    ]
                }]
        }] });

class TextFieldComponent {
    constructor() {
        this.placeholder = "";
        this.valueChange = new EventEmitter();
    }
    changed(updatedValue) {
        this.valueChange.emit(updatedValue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: TextFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: TextFieldComponent, selector: "quick-text-field", inputs: { placeholder: "placeholder", value: "value" }, outputs: { valueChange: "valueChange" }, ngImport: i0, template: "<quick-row class=\"control\">\n    <ng-content select=\"quick-text-field-prefix\"></ng-content>\n    <input type=\"text\" [(ngModel)]=\"value\" [placeholder]=\"placeholder\" (ngModelChange)=\"changed($event)\">\n    <ng-content select=\"quick-text-field-suffix\"></ng-content>\n</quick-row>", styles: [".control{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 .5rem;height:36px;border:1px solid var(--gray-300);border-radius:.5rem}.control input{flex:1;border:none}.control input:focus{outline:0}\n"], dependencies: [{ kind: "directive", type: i1$2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: RowComponent, selector: "quick-row" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: TextFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-text-field', template: "<quick-row class=\"control\">\n    <ng-content select=\"quick-text-field-prefix\"></ng-content>\n    <input type=\"text\" [(ngModel)]=\"value\" [placeholder]=\"placeholder\" (ngModelChange)=\"changed($event)\">\n    <ng-content select=\"quick-text-field-suffix\"></ng-content>\n</quick-row>", styles: [".control{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 .5rem;height:36px;border:1px solid var(--gray-300);border-radius:.5rem}.control input{flex:1;border:none}.control input:focus{outline:0}\n"] }]
        }], propDecorators: { placeholder: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }] } });

class PickerComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.placeholder = "Selecione";
        this.options = [];
        this.controlValue = null;
        this.clearable = false;
        this.onSelect = new EventEmitter();
        this.menuIsVisible = false;
    }
    open() {
        this.menuIsVisible = true;
    }
    close() {
        this.menuIsVisible = false;
    }
    toggle() {
        this.menuIsVisible = !this.menuIsVisible;
    }
    onOptionSelected(event, value) {
        event.stopImmediatePropagation();
        this.changeValue(value);
    }
    changeValue(value) {
        this.controlValue = value;
        this.onSelect.emit(this.controlValue ? this.controlValue.value : null);
        this.menuIsVisible = false;
    }
    clear() {
        this.changeValue(null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: PickerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: PickerComponent, selector: "quick-picker", inputs: { placeholder: "placeholder", options: "options", controlValue: "controlValue", clearable: "clearable" }, outputs: { onSelect: "onSelect" }, usesInheritance: true, ngImport: i0, template: "<quick-row class=\"control\"\n    [class]=\"[componentStyle, componentSize, color, (round? 'round':''), (disabled? 'disabled':''), (menuIsVisible? 'visible-menu':'')]\"\n    (click)=\"toggle()\" clickOutside (clickOutside)=\"close()\">\n    <span style=\"flex: 1\">{{controlValue?.displayText ?? placeholder}}</span>\n    <quick-icon *ngIf=\"clearable && controlValue\" iconName=\"close\" (click)=\"clear()\" />\n    <quick-icon iconName=\"down\" />\n</quick-row>\n\n<ul *ngIf=\"menuIsVisible\">\n    <li *ngFor=\"let option of options\" (click)=\"onOptionSelected($event, option)\" [title]=\"option.displayText\">\n        {{option.displayText}}</li>\n</ul>", styles: [":host{--button-border-width: 2px}.control{width:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:center;align-items:center;background-color:unset;border:none;border-radius:.5rem;font-weight:500;transition:all ease .2s}.control.small{height:24px;padding:0 12px}.control.small.bordered{padding:0 10px}.control.small.round{border-radius:12px}.control.medium{height:36px;padding:0 18px}.control.medium.bordered{padding:0 16px}.control.medium.round{border-radius:18px}.control.large{height:48px;padding:0 24px}.control.large.round{border-radius:24px}.control.grayed{background-color:var(--gray-300);color:var(--gray-700)}.control.flat.primary{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.bordered.primary{border:solid var(--button-border-width);border-color:var(--primary-color);color:var(--primary-color)}.control.grayed.primary:not(:disabled):hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.flat.accent{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.bordered.accent{border:solid var(--button-border-width);border-color:var(--accent-color);color:var(--accent-color)}.control.grayed.accent:not(:disabled):hover{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.flat.info{background-color:var(--info-color);color:var(--text-info-contrast)}.control.bordered.info{border:solid var(--button-border-width);border-color:var(--info-color);color:var(--info-color)}.control.grayed.info:not(:disabled):hover{background-color:var(--info-color);color:var(--text-info-contrast)}.control.flat.success{background-color:var(--success-color);color:var(--text-success-contrast)}.control.bordered.success{border:solid var(--button-border-width);border-color:var(--success-color);color:var(--success-color)}.control.grayed.success:not(:disabled):hover{background-color:var(--success-color);color:var(--text-success-contrast)}.control.flat.warn{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.bordered.warn{border:solid var(--button-border-width);border-color:var(--warn-color);color:var(--warn-color)}.control.grayed.warn:not(:disabled):hover{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.flat.danger{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.bordered.danger{border:solid var(--button-border-width);border-color:var(--danger-color);color:var(--danger-color)}.control.grayed.danger:not(:disabled):hover{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.flat:not(:disabled):hover{filter:brightness(1.2)}.control.bordered:not(:disabled):hover{filter:brightness(1.2)}.control:disabled,.control.disabled{opacity:.8;filter:unset}\n", ":host{position:relative}.control{cursor:pointer;flex-wrap:nowrap}.control.visible-menu{border-bottom-left-radius:0;border-bottom-right-radius:0}.control span{text-wrap:nowrap;overflow:hidden}ul{box-sizing:border-box;display:flex;flex-direction:column;width:100%;max-width:100%;overflow-x:hidden;max-height:280px;overflow-y:auto;position:absolute;background-color:#fff;z-index:200;border-radius:.25rem;border-top-left-radius:0;border-top-right-radius:0;box-shadow:0 3px 4px #00000008}ul li{cursor:pointer;transition:all .2s ease-in;padding:.75rem;text-wrap:nowrap;max-width:100%}ul li:hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: ClickOutsideDirective, selector: "[clickOutside]", outputs: ["clickOutside"] }, { kind: "component", type: IconComponent, selector: "quick-icon", inputs: ["iconName"] }, { kind: "component", type: RowComponent, selector: "quick-row" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: PickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-picker', template: "<quick-row class=\"control\"\n    [class]=\"[componentStyle, componentSize, color, (round? 'round':''), (disabled? 'disabled':''), (menuIsVisible? 'visible-menu':'')]\"\n    (click)=\"toggle()\" clickOutside (clickOutside)=\"close()\">\n    <span style=\"flex: 1\">{{controlValue?.displayText ?? placeholder}}</span>\n    <quick-icon *ngIf=\"clearable && controlValue\" iconName=\"close\" (click)=\"clear()\" />\n    <quick-icon iconName=\"down\" />\n</quick-row>\n\n<ul *ngIf=\"menuIsVisible\">\n    <li *ngFor=\"let option of options\" (click)=\"onOptionSelected($event, option)\" [title]=\"option.displayText\">\n        {{option.displayText}}</li>\n</ul>", styles: [":host{--button-border-width: 2px}.control{width:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:center;align-items:center;background-color:unset;border:none;border-radius:.5rem;font-weight:500;transition:all ease .2s}.control.small{height:24px;padding:0 12px}.control.small.bordered{padding:0 10px}.control.small.round{border-radius:12px}.control.medium{height:36px;padding:0 18px}.control.medium.bordered{padding:0 16px}.control.medium.round{border-radius:18px}.control.large{height:48px;padding:0 24px}.control.large.round{border-radius:24px}.control.grayed{background-color:var(--gray-300);color:var(--gray-700)}.control.flat.primary{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.bordered.primary{border:solid var(--button-border-width);border-color:var(--primary-color);color:var(--primary-color)}.control.grayed.primary:not(:disabled):hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}.control.flat.accent{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.bordered.accent{border:solid var(--button-border-width);border-color:var(--accent-color);color:var(--accent-color)}.control.grayed.accent:not(:disabled):hover{background-color:var(--accent-color);color:var(--text-accent-contrast)}.control.flat.info{background-color:var(--info-color);color:var(--text-info-contrast)}.control.bordered.info{border:solid var(--button-border-width);border-color:var(--info-color);color:var(--info-color)}.control.grayed.info:not(:disabled):hover{background-color:var(--info-color);color:var(--text-info-contrast)}.control.flat.success{background-color:var(--success-color);color:var(--text-success-contrast)}.control.bordered.success{border:solid var(--button-border-width);border-color:var(--success-color);color:var(--success-color)}.control.grayed.success:not(:disabled):hover{background-color:var(--success-color);color:var(--text-success-contrast)}.control.flat.warn{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.bordered.warn{border:solid var(--button-border-width);border-color:var(--warn-color);color:var(--warn-color)}.control.grayed.warn:not(:disabled):hover{background-color:var(--warn-color);color:var(--text-warn-contrast)}.control.flat.danger{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.bordered.danger{border:solid var(--button-border-width);border-color:var(--danger-color);color:var(--danger-color)}.control.grayed.danger:not(:disabled):hover{background-color:var(--danger-color);color:var(--text-danger-contrast)}.control.flat:not(:disabled):hover{filter:brightness(1.2)}.control.bordered:not(:disabled):hover{filter:brightness(1.2)}.control:disabled,.control.disabled{opacity:.8;filter:unset}\n", ":host{position:relative}.control{cursor:pointer;flex-wrap:nowrap}.control.visible-menu{border-bottom-left-radius:0;border-bottom-right-radius:0}.control span{text-wrap:nowrap;overflow:hidden}ul{box-sizing:border-box;display:flex;flex-direction:column;width:100%;max-width:100%;overflow-x:hidden;max-height:280px;overflow-y:auto;position:absolute;background-color:#fff;z-index:200;border-radius:.25rem;border-top-left-radius:0;border-top-right-radius:0;box-shadow:0 3px 4px #00000008}ul li{cursor:pointer;transition:all .2s ease-in;padding:.75rem;text-wrap:nowrap;max-width:100%}ul li:hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}\n"] }]
        }], propDecorators: { placeholder: [{
                type: Input
            }], options: [{
                type: Input
            }], controlValue: [{
                type: Input
            }], clearable: [{
                type: Input
            }], onSelect: [{
                type: Output
            }] } });

class TextFieldSuffixComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: TextFieldSuffixComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: TextFieldSuffixComponent, selector: "quick-text-field-suffix", ngImport: i0, template: "<ng-content></ng-content>", styles: [":host ::ng-deep *{color:var(--gray-600)}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: TextFieldSuffixComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-text-field-suffix', template: "<ng-content></ng-content>", styles: [":host ::ng-deep *{color:var(--gray-600)}\n"] }]
        }] });

class StarRatingComponent {
    constructor() {
        this.disabled = false;
        this.mouseOver = null;
        this.rating = 0;
        this.maxRate = 5;
        this.color = "primary";
        this.onChange = (rating) => { };
        this.onTouched = () => { };
    }
    writeValue(obj) {
        this.rating = obj;
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onMouseEnter(rate) {
        if (this.disabled)
            return;
        this.mouseOver = rate;
    }
    onMouseLeave() {
        if (this.disabled)
            return;
        this.mouseOver = null;
    }
    setValue(value) {
        if (this.disabled)
            return;
        this.writeValue(value);
        this.onChange(value);
    }
    get stars() {
        const stars = new Array(this.maxRate).fill(0).map((value, index) => {
            return index + 1;
        });
        return stars;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: StarRatingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.0", type: StarRatingComponent, selector: "quick-star-rating", inputs: { maxRate: "maxRate", color: "color" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: StarRatingComponent
            }
        ], ngImport: i0, template: "<ul class=\"{{color}}\" [ngClass]=\"{'disabled':disabled}\">\n    @for (rate of stars; track $index) {\n    <li (click)=\"setValue(rate)\" (mouseenter)=\"onMouseEnter(rate)\" (mouseleave)=\"onMouseLeave()\"\n        [ngClass]=\"{'active': (mouseOver && mouseOver >= rate) || (!mouseOver && rating >= rate)}\">\n        <quick-icon iconName=\"star\" />\n    </li>\n    }\n</ul>", styles: ["ul{display:flex;flex-direction:row;align-items:center;height:42px;box-sizing:border-box;padding:0 .5rem;font-size:1.25rem}ul.primary{color:var(--primary-color)}ul.accent{color:var(--accent-color)}ul.info{color:var(--info-color)}ul.success{color:var(--success-color)}ul.warn{color:var(--warn-color)}ul.danger{color:var(--danger-color)}ul li{cursor:pointer;opacity:.2}ul li.active{opacity:1}ul.disabled{opacity:.8}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.DefaultClassDirective, selector: "  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]", inputs: ["ngClass", "ngClass.xs", "ngClass.sm", "ngClass.md", "ngClass.lg", "ngClass.xl", "ngClass.lt-sm", "ngClass.lt-md", "ngClass.lt-lg", "ngClass.lt-xl", "ngClass.gt-xs", "ngClass.gt-sm", "ngClass.gt-md", "ngClass.gt-lg"] }, { kind: "component", type: IconComponent, selector: "quick-icon", inputs: ["iconName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: StarRatingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-star-rating', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: StarRatingComponent
                        }
                    ], template: "<ul class=\"{{color}}\" [ngClass]=\"{'disabled':disabled}\">\n    @for (rate of stars; track $index) {\n    <li (click)=\"setValue(rate)\" (mouseenter)=\"onMouseEnter(rate)\" (mouseleave)=\"onMouseLeave()\"\n        [ngClass]=\"{'active': (mouseOver && mouseOver >= rate) || (!mouseOver && rating >= rate)}\">\n        <quick-icon iconName=\"star\" />\n    </li>\n    }\n</ul>", styles: ["ul{display:flex;flex-direction:row;align-items:center;height:42px;box-sizing:border-box;padding:0 .5rem;font-size:1.25rem}ul.primary{color:var(--primary-color)}ul.accent{color:var(--accent-color)}ul.info{color:var(--info-color)}ul.success{color:var(--success-color)}ul.warn{color:var(--warn-color)}ul.danger{color:var(--danger-color)}ul li{cursor:pointer;opacity:.2}ul li.active{opacity:1}ul.disabled{opacity:.8}\n"] }]
        }], propDecorators: { maxRate: [{
                type: Input
            }], color: [{
                type: Input
            }] } });

class InputsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: InputsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: InputsModule, declarations: [PickerComponent,
            TextFieldComponent,
            TextFieldSuffixComponent,
            StarRatingComponent], imports: [CommonModule,
            FormsModule,
            SharedModule,
            UiModule], exports: [PickerComponent,
            TextFieldComponent,
            TextFieldSuffixComponent,
            StarRatingComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: InputsModule, imports: [CommonModule,
            FormsModule,
            SharedModule,
            UiModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: InputsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        PickerComponent,
                        TextFieldComponent,
                        TextFieldSuffixComponent,
                        StarRatingComponent,
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        SharedModule,
                        UiModule
                    ],
                    exports: [
                        PickerComponent,
                        TextFieldComponent,
                        TextFieldSuffixComponent,
                        StarRatingComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of gquicklib-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AuthModule, ButtonComponent, ButtonModule, CardBodyComponent, CardComponent, CardHeaderComponent, CardModule, CardTitleComponent, ClickOutsideDirective, ColumnComponent, DatagridComponent, FileManagerModule, FilterBuilder, FormAutocompleteComponent, FormErrorComponent, FormFieldComponent, IconComponent, IconModule, InputsModule, ModalsModule, PhotoGaleryComponent, PickerComponent, QuickFormsModule, RatingBadgeComponent, RestService, RowComponent, ShadowboxComponent, SharedModule, StarRatingComponent, TextFieldComponent, TextFieldSuffixComponent, ToolbarComponent, UiModule };
//# sourceMappingURL=gimmeapps-gquicklib-angular.mjs.map
