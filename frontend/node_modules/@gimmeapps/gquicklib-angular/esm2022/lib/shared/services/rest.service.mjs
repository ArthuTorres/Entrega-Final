import { HttpParams } from "@angular/common/http";
import { FilterBuilder } from "../../../public-api";
export class RestService {
    constructor(http) {
        this.http = http;
    }
    getQuery(filter) {
        let params = new HttpParams();
        if (filter) {
            const builder = new FilterBuilder(filter);
            params = params.append("filter", builder.encode());
        }
        return params;
    }
    query(filter) {
        let params = this.getQuery(filter);
        return this.http.get(this.api, { params });
    }
    paginate(page, pageSize, filter) {
        let params = this.getQuery(filter);
        params = params.append("page", page);
        if (pageSize)
            params = params.append("pagesize", pageSize);
        return this.http.get(this.api, { params });
    }
    lookup(filter) {
        let params = this.getQuery(filter);
        return this.http.get(`${this.api}/lookup`, { params });
    }
    getById(id) {
        return this.http.get(`${this.api}/${id}`);
    }
    insert(dados) {
        return this.http.post(`${this.api}`, dados);
    }
    update(id, dados) {
        return this.http.post(`${this.api}/${id}`, dados);
    }
    delete(id) {
        return this.http.delete(`${this.api}/${id}`);
    }
    bulk(dados) {
        return this.http.post(`${this.api}/bulk`, dados);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZ3F1aWNrbGliLWFuZ3VsYXIvc3JjL2xpYi9zaGFyZWQvc2VydmljZXMvcmVzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUc5RCxPQUFPLEVBQUUsYUFBYSxFQUFzQixNQUFNLHFCQUFxQixDQUFDO0FBRXhFLE1BQU0sT0FBZ0IsV0FBVztJQUc3QixZQUNjLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFDMUIsQ0FBQztJQUVHLFFBQVEsQ0FBQyxNQUEyQjtRQUN4QyxJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBRTlCLElBQUksTUFBTSxFQUFFLENBQUM7WUFDVCxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN6QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDdEQsQ0FBQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBMkI7UUFDN0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxRQUFRLENBQUMsSUFBWSxFQUFFLFFBQWlCLEVBQUUsTUFBMkI7UUFDakUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxRQUFRO1lBQ1IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRWpELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUEyQjtRQUM5QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBVTtRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFpQjtRQUNwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVSxFQUFFLEtBQWlCO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVTtRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFtQjtRQUNwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgQmFzZU1vZGVsLCBMb29rdXAsIFBhZ2UgfSBmcm9tIFwiLi4vbW9kZWxzXCI7XG5pbXBvcnQgeyBGaWx0ZXJCdWlsZGVyLCBGaWx0ZXJMb2dpY2FsR3JvdXAgfSBmcm9tIFwiLi4vLi4vLi4vcHVibGljLWFwaVwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVzdFNlcnZpY2U8VCBleHRlbmRzIEJhc2VNb2RlbD4ge1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBhcGk6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudFxuICAgICkgeyB9XG5cbiAgICBwcml2YXRlIGdldFF1ZXJ5KGZpbHRlcj86IEZpbHRlckxvZ2ljYWxHcm91cCkge1xuICAgICAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcblxuICAgICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IEZpbHRlckJ1aWxkZXIoZmlsdGVyKVxuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZChcImZpbHRlclwiLCBidWlsZGVyLmVuY29kZSgpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG5cbiAgICBxdWVyeShmaWx0ZXI/OiBGaWx0ZXJMb2dpY2FsR3JvdXApOiBPYnNlcnZhYmxlPFRbXT4ge1xuICAgICAgICBsZXQgcGFyYW1zID0gdGhpcy5nZXRRdWVyeShmaWx0ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxUW10+KHRoaXMuYXBpLCB7IHBhcmFtcyB9KTtcbiAgICB9XG5cbiAgICBwYWdpbmF0ZShwYWdlOiBudW1iZXIsIHBhZ2VTaXplPzogbnVtYmVyLCBmaWx0ZXI/OiBGaWx0ZXJMb2dpY2FsR3JvdXApOiBPYnNlcnZhYmxlPFBhZ2U8VD4+IHtcbiAgICAgICAgbGV0IHBhcmFtcyA9IHRoaXMuZ2V0UXVlcnkoZmlsdGVyKTtcblxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKFwicGFnZVwiLCBwYWdlKTtcbiAgICAgICAgaWYgKHBhZ2VTaXplKVxuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZChcInBhZ2VzaXplXCIsIHBhZ2VTaXplKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQYWdlPFQ+Pih0aGlzLmFwaSwgeyBwYXJhbXMgfSk7XG4gICAgfVxuXG4gICAgbG9va3VwKGZpbHRlcj86IEZpbHRlckxvZ2ljYWxHcm91cCk6IE9ic2VydmFibGU8TG9va3VwPiB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB0aGlzLmdldFF1ZXJ5KGZpbHRlcilcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8TG9va3VwPihgJHt0aGlzLmFwaX0vbG9va3VwYCwgeyBwYXJhbXMgfSk7XG4gICAgfVxuXG4gICAgZ2V0QnlJZChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFQ+KGAke3RoaXMuYXBpfS8ke2lkfWApO1xuICAgIH1cblxuICAgIGluc2VydChkYWRvczogUGFydGlhbDxUPik6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8VD4oYCR7dGhpcy5hcGl9YCwgZGFkb3MpO1xuICAgIH1cblxuICAgIHVwZGF0ZShpZDogbnVtYmVyLCBkYWRvczogUGFydGlhbDxUPik6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8VD4oYCR7dGhpcy5hcGl9LyR7aWR9YCwgZGFkb3MpO1xuICAgIH1cblxuICAgIGRlbGV0ZShpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGU8YW55PihgJHt0aGlzLmFwaX0vJHtpZH1gKTtcbiAgICB9XG5cbiAgICBidWxrKGRhZG9zOiBQYXJ0aWFsPFQ+W10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PFRbXT4oYCR7dGhpcy5hcGl9L2J1bGtgLCBkYWRvcyk7XG4gICAgfVxufSJdfQ==