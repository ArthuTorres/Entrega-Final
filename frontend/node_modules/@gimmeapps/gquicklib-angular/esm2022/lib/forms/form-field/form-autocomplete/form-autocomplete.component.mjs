import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class FormAutocompleteComponent {
    constructor() {
        this.options = [];
        this.filterText = "";
        this.isVisible = false;
    }
    ngOnInit() {
        if (this.target) {
            this.target.autocomplete = "off";
            this.target.addEventListener('focus', this.onTargetFocus.bind(this));
            this.target.addEventListener('blur', this.onTargetBlur.bind(this));
            this.target.addEventListener('input', this.onTargetInput.bind(this));
        }
    }
    onTargetFocus(ev) {
        this.isVisible = true;
        if (this.target)
            this.filterText = this.target.value;
    }
    onTargetBlur(ev) {
        setTimeout(() => {
            this.isVisible = false;
        }, 150);
    }
    onTargetInput(ev) {
        if (this.target)
            this.filterText = this.target.value;
    }
    select(value) {
        if (this.control) {
            this.control.setValue(value);
        }
        else if (this.target) {
            this.target.value = value;
        }
    }
    get filteredOptions() {
        return this.options.filter(o => o.toLowerCase().includes(this.filterText.toLowerCase()));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormAutocompleteComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: FormAutocompleteComponent, selector: "quick-form-autocomplete", inputs: { options: "options", target: "target", control: "control" }, ngImport: i0, template: "<ul class=\"autocomplete-wrapper\" *ngIf=\"isVisible && options.length > 0\">\n    <li class=\"autocomplete-option\" *ngFor=\"let option of filteredOptions\" (click)=\"select(option)\">{{option}}</li>\n</ul>", styles: [":host{position:relative}ul{z-index:100;background-color:#fff;position:absolute;border:1px solid var(--gray-300);border-radius:.5rem;width:100%;overflow:hidden;overflow-y:scroll;max-height:200px}ul li{padding:.5rem;font-weight:500;color:var(--gray-700);cursor:pointer}ul li:hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: FormAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'quick-form-autocomplete', template: "<ul class=\"autocomplete-wrapper\" *ngIf=\"isVisible && options.length > 0\">\n    <li class=\"autocomplete-option\" *ngFor=\"let option of filteredOptions\" (click)=\"select(option)\">{{option}}</li>\n</ul>", styles: [":host{position:relative}ul{z-index:100;background-color:#fff;position:absolute;border:1px solid var(--gray-300);border-radius:.5rem;width:100%;overflow:hidden;overflow-y:scroll;max-height:200px}ul li{padding:.5rem;font-weight:500;color:var(--gray-700);cursor:pointer}ul li:hover{background-color:var(--primary-color);color:var(--text-primary-contrast)}\n"] }]
        }], propDecorators: { options: [{
                type: Input
            }], target: [{
                type: Input
            }], control: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1hdXRvY29tcGxldGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZ3F1aWNrbGliLWFuZ3VsYXIvc3JjL2xpYi9mb3Jtcy9mb3JtLWZpZWxkL2Zvcm0tYXV0b2NvbXBsZXRlL2Zvcm0tYXV0b2NvbXBsZXRlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2dxdWlja2xpYi1hbmd1bGFyL3NyYy9saWIvZm9ybXMvZm9ybS1maWVsZC9mb3JtLWF1dG9jb21wbGV0ZS9mb3JtLWF1dG9jb21wbGV0ZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQzs7O0FBUXpELE1BQU0sT0FBTyx5QkFBeUI7SUFMdEM7UUFNVyxZQUFPLEdBQWEsRUFBRSxDQUFBO1FBSXZCLGVBQVUsR0FBRyxFQUFFLENBQUE7UUFDdkIsY0FBUyxHQUFHLEtBQUssQ0FBQTtLQXVDbEI7SUFyQ0MsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQTtZQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQ3BFLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN0RSxDQUFDO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxFQUFTO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksSUFBSSxDQUFDLE1BQU07WUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ3ZDLENBQUM7SUFFRCxZQUFZLENBQUMsRUFBUztRQUNwQixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUE7UUFDeEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUVELGFBQWEsQ0FBQyxFQUFTO1FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU07WUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ3ZDLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYTtRQUNsQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM5QixDQUFDO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQzNCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzFGLENBQUM7OEdBNUNVLHlCQUF5QjtrR0FBekIseUJBQXlCLHFJQ1J0QyxpTkFFSzs7MkZETVEseUJBQXlCO2tCQUxyQyxTQUFTOytCQUNFLHlCQUF5Qjs4QkFLMUIsT0FBTztzQkFBZixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxPQUFPO3NCQUFmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncXVpY2stZm9ybS1hdXRvY29tcGxldGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1hdXRvY29tcGxldGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybDogJy4vZm9ybS1hdXRvY29tcGxldGUuY29tcG9uZW50LnNjc3MnXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1BdXRvY29tcGxldGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBvcHRpb25zOiBzdHJpbmdbXSA9IFtdXG4gIEBJbnB1dCgpIHRhcmdldD86IEhUTUxJbnB1dEVsZW1lbnRcbiAgQElucHV0KCkgY29udHJvbD86IEFic3RyYWN0Q29udHJvbDtcblxuICBwcml2YXRlIGZpbHRlclRleHQgPSBcIlwiXG4gIGlzVmlzaWJsZSA9IGZhbHNlXG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICB0aGlzLnRhcmdldC5hdXRvY29tcGxldGUgPSBcIm9mZlwiXG4gICAgICB0aGlzLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMub25UYXJnZXRGb2N1cy5iaW5kKHRoaXMpKVxuICAgICAgdGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25UYXJnZXRCbHVyLmJpbmQodGhpcykpXG4gICAgICB0aGlzLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMub25UYXJnZXRJbnB1dC5iaW5kKHRoaXMpKVxuICAgIH1cbiAgfVxuXG4gIG9uVGFyZ2V0Rm9jdXMoZXY6IEV2ZW50KSB7XG4gICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgIGlmICh0aGlzLnRhcmdldClcbiAgICAgIHRoaXMuZmlsdGVyVGV4dCA9IHRoaXMudGFyZ2V0LnZhbHVlXG4gIH1cblxuICBvblRhcmdldEJsdXIoZXY6IEV2ZW50KSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlXG4gICAgfSwgMTUwKTtcbiAgfVxuXG4gIG9uVGFyZ2V0SW5wdXQoZXY6IEV2ZW50KSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0KVxuICAgICAgdGhpcy5maWx0ZXJUZXh0ID0gdGhpcy50YXJnZXQudmFsdWVcbiAgfVxuXG4gIHNlbGVjdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbCkge1xuICAgICAgdGhpcy5jb250cm9sLnNldFZhbHVlKHZhbHVlKVxuICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgIHRoaXMudGFyZ2V0LnZhbHVlID0gdmFsdWVcbiAgICB9XG4gIH1cblxuICBnZXQgZmlsdGVyZWRPcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmlsdGVyKG8gPT4gby50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuZmlsdGVyVGV4dC50b0xvd2VyQ2FzZSgpKSlcbiAgfVxufVxuIiwiPHVsIGNsYXNzPVwiYXV0b2NvbXBsZXRlLXdyYXBwZXJcIiAqbmdJZj1cImlzVmlzaWJsZSAmJiBvcHRpb25zLmxlbmd0aCA+IDBcIj5cbiAgICA8bGkgY2xhc3M9XCJhdXRvY29tcGxldGUtb3B0aW9uXCIgKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBmaWx0ZXJlZE9wdGlvbnNcIiAoY2xpY2spPVwic2VsZWN0KG9wdGlvbilcIj57e29wdGlvbn19PC9saT5cbjwvdWw+Il19